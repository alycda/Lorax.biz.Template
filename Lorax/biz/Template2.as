/** * Template * Created for 	Lorax.biz * * @author		Alyssa Davis // hello@alyda.me * @version		0.00.02 * @updated		4.10.13 */ package Lorax.biz {		import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.net.*;		public class Template2 extends MovieClip {				var closeBTN:SimpleButton = btn(sprite('close',25,25));		var _xml:XML;		var xmlList:XMLList;				public function Template2() {			//Fullscreen exit btn			addChild(closeBTN);			closeBTN.addEventListener(MouseEvent.CLICK, exit);						//Fullscreen			fullscreen();						//Load XML			load('settings.xml');		}				//button		function btn(_sprite:Sprite):SimpleButton {			var _btn:SimpleButton = new SimpleButton()						_btn.name = _sprite.name+'BTN';						var _btnOver = _sprite			_btn.overState = _btnOver;			_btn.hitTestState = _btnOver;						_btn.useHandCursor = true;			//mousechildren?									return _btn;		}				//sprite		function sprite(_name:String,_w:Number=100,_h:Number=100,_alpha:Number=1.0,_color=0x000000):Sprite {			var _sprite:Sprite = new Sprite();			_sprite.name = _name;			_sprite.graphics.beginFill(_color);			_sprite.graphics.drawRect(0, 0, _w, _h);			_sprite.graphics.endFill();						_sprite.alpha = _alpha;			return _sprite;		}				//text						function txt(_txt:String,tag:String='p'):TextField {			var _tf:TextField = new TextField();			_tf.styleSheet=style.stylesheet; //stupid note, this has to be applied BEFORE setting text on the TextField...			//_tf.defaultTextFormat = style.textFormat;			_tf.htmlText = '<'+tag+'>'+_txt+'</'+tag+'>';			//_tf.wordWrap=true;			_tf.autoSize = TextFieldAutoSize.LEFT;			//style.textFormat.size = _size; 			//style.textFormat.align = _align;			//_tf.setTextFormat(style.textFormat);			_tf.selectable = false;			//_mc = new MovieClip();			//_mc.addChild(_tf);			return (_tf);		}				function coverSheet():void {			style.stylesheet.parseCSS(style.css);						trace(_xml.title);			var _title = txt(_xml.title,'h1');			addChild(_title);			trace('===============');			trace(_xml.subtitle);			var _subtitle = txt(_xml.subtitle,'h2');			addChild(_subtitle);			trace('-----------------------------')			trace(_xml.version);			var _version = txt(_xml.version,'h3');			addChild(_version);			trace();			trace('PRIVILEGED AND CONFIDENTIAL    |    ATTORNEY-CLIENT COMMUNICATION    |    ATTORNEY WORK PRODUCT');			var _legal = txt('PRIVILEGED AND CONFIDENTIAL    |    ATTORNEY-CLIENT COMMUNICATION    |    ATTORNEY WORK PRODUCT','h5');			addChild(_legal);		}				function xml(e:Event):void {			_xml = new XML(e.target.data); 			xmlList = new XMLList(_xml.Menu);			coverSheet();		}				function io_error(errorEvent:IOErrorEvent) {			trace('ERROR: file not found?');		}				function load(_file:String):void {			var loader:URLLoader = new URLLoader();			loader.load(new URLRequest(_file));			loader.addEventListener(Event.COMPLETE, xml);			loader.addEventListener(IOErrorEvent.IO_ERROR, io_error);		}				function exit(e:MouseEvent):void {			try {                stage.displayState = StageDisplayState.NORMAL;				closeBTN.x = stage.stageWidth - 25;				//closeBTN.removeEventListener(MouseEvent.CLICK, exit);            } catch (error:SecurityError) {				trace('error, not in fullscreen mode');            }		}				function fullscreen():void {			try {                stage.displayState = StageDisplayState.FULL_SCREEN;				closeBTN.x = stage.stageWidth - 25;				//closeBTN.addEventListener(MouseEvent.CLICK, exit);            } catch (error:SecurityError) {				trace('Must be in projector mode for full screen viewing');            }			}	}	}internal class style {		import flash.text.*;		//not all css properties are supported. Check the list here: http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/text/StyleSheet.html	//as3 can not parse the styles if they are not on their own separate lines (e.g. do not do this: '} h2 {' on the same line, nor will 'h1, h2, h3 {' work	static var css:XML = <style>							<![CDATA[								 								h1 {									font-family:Tahoma;									font-weight:bold;									font-size:48px;								} 								h2 {									font-family:Tahoma;									font-weight:bold;									font-size:26px;								}								h3 {									font-family:Tahoma;									font-size:18px;								}								h4 {									font-family:Tahoma;									font-weight:bold;									font-size:14px;								}								h5 {									font-family:Tahoma;									font-weight:bold;									font-size:12px;									color:#992408;								}								p {									font-family:Tahoma;									color:#992408;								}								a {								}							]]>						</style>	static var stylesheet:StyleSheet = new StyleSheet();	}